// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        noiseTexture: { value: white }
        distortionTexture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  in vec2 a_uv0;
  
  out vec4 v_color;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;

    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
    precision highp float;
    
    #include <alpha-test>
    #include <cc-global>
    #include <cc-local>

    in vec4 v_color;
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform sampler2D noiseTexture;
    uniform sampler2D distortionTexture;
    
    vec4 lerp(vec4 a, vec4 b, float t) {
        return a.rgba + (b.rgba-a.rgba) * t;
    }

    void main () {
        
        vec4 o = vec4(0, 0, 0, 1.);
        vec4 gradientShallow = vec4(0.325, 0.807, 0.971, 0.725); // 浅色
        vec4 gradientDeep = vec4(0.086, 0.407, 1, 0.749); // 深色
        float maxDistance = 0.5;
        float noiseCutoff = 0.777;
        float foamDistance = 0.4;
        vec2 noiseScroll = vec2(0.03, 0.03);
        float distortionAmount = 0.27;

        // 底色
        float depthDiff = length(v_uv0.xy - 0.5);
        float waterDiff01 = depthDiff / maxDistance;
        o = lerp(gradientDeep, gradientShallow, waterDiff01);
        
        // border
        float borderDepthDiff01 = 1. - smoothstep(foamDistance, maxDistance, depthDiff);
        noiseCutoff = borderDepthDiff01 * noiseCutoff;
        
        // distortion
        vec4 distortion = texture(distortionTexture, v_uv0);
        vec2 distortSample = (distortion.xy * 2. - 1.) * distortionAmount;
        
        // noise
        vec2 noiseUV = vec2(v_uv0.x + cc_time.x * noiseScroll.x + distortSample.x, v_uv0.y + cc_time.x * noiseScroll.y + distortSample.y);
        vec4 noise = texture(noiseTexture, noiseUV);
        
        // o.rgba += step(noiseCutoff, noise.r);
        o.rgba += smoothstep(noiseCutoff - 0.01, noiseCutoff + 0.01, noise.r);
        
        gl_FragColor = o;
    }
}%
