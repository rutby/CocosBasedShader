// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        noiseTexture: { value: white }
        alphaThreshold: { value: 0.5 }
        outlineWidth: { value: 3.0 }
        textureSize: { value: [303, 380] }
        outlineColor: { value: [0.086, 0.407, 1, 1.] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;

    v_uv0 = a_uv0;
    v_color = a_color;
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform sampler2D noiseTexture;
  
  uniform CUSTOM {
      vec4 outlineColor;
      vec2 textureSize;
      float outlineWidth;
  };
  
    float kernel(float width) {
        vec4 noise = texture(noiseTexture, v_uv0 + fract(cc_time.x));
        vec2 noiseOffset = vec2(noise.r * 0.01, noise.g * 0.01);
        
        float ox = width / textureSize.x + noiseOffset.x;
        float oy = width / textureSize.y + noiseOffset.y;
        
        vec2 pos1 = v_uv0 + vec2(-ox, -oy);
        vec2 pos2 = v_uv0 + vec2(-ox, oy);
        vec2 pos3 = v_uv0 + vec2(ox, -oy);
        vec2 pos4 = v_uv0 + vec2(ox, oy);
        
        vec2 pos5 = v_uv0 + vec2(-ox, 0.);
        vec2 pos6 = v_uv0 + vec2(ox, 0.);
        vec2 pos7 = v_uv0 + vec2(0., -oy);
        vec2 pos8 = v_uv0 + vec2(0., oy);
        
        // sample
        float p1 = texture(texture, pos1).a;
        float p2 = texture(texture, pos2).a;
        float p3 = texture(texture, pos3).a;
        float p4 = texture(texture, pos4).a;
        
        float p5 = texture(texture, pos5).a;
        float p6 = texture(texture, pos6).a;
        float p7 = texture(texture, pos7).a;
        float p8 = texture(texture, pos8).a;
        
        return (p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8) / 8.0 * step(texture(texture, v_uv0).a, 0.5);
    }
    
    vec4 lerp(vec4 a, vec4 b, float t) {
        return a.rgba + (b.rgba-a.rgba) * t;
    }

  void main () {
    vec4 o = texture(texture, v_uv0);
    float s2 = kernel(outlineWidth);
    
    o = lerp(o, outlineColor, smoothstep(0.1 - 0.1, 0.1 + 0.1, s2));

    gl_FragColor = o;
  }
}%
