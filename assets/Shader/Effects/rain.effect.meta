{
  "ver": "1.0.25",
  "uuid": "c738eb1d-9ce5-4f2f-9b37-b39d81f40bc8",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform sampler2D rippleTexture;\nuniform float speed;\nuniform float force;\nfloat ripple(float emisive, vec2 pos, float radius) {\n  float d = length(v_uv0.xy - pos);\n  float s1 = step(d, radius * emisive);\n  float s2 = step(radius * 0.9  * emisive, d);\n  return step(2., s1 + s2);\n}\nvoid main () {\n  vec4 o = texture2D(texture, v_uv0);\n  vec2 rain_uv = vec2(v_uv0.x, v_uv0.y * 0.02 - cc_time.x * speed);\n  rain_uv.x += v_uv0.y * 0.3;\n  vec4 col_rain = texture2D(noiseTexture, rain_uv);\n  float f = (col_rain.r - force *  col_rain.g - force *  col_rain.b);\n  f = smoothstep(0., 0.05, f);\n  o.rgb += vec3(f);\n  vec4 ripple = texture2D(rippleTexture, v_uv0);\n  float opacity = fract(ripple.a + cc_time.x);\n  float range = opacity - 1.0 + ripple.x;\n  float fadeout = 1. - opacity;\n  float final = fadeout * sin(clamp(range * 80.0, 0.0, 2.) * 3.141592653) * 2.0;\n  o.rgb += vec3(clamp(final, 0., 1.));\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform sampler2D rippleTexture;\nuniform Rain {\n  float speed;\n  float force;\n};\nfloat ripple(float emisive, vec2 pos, float radius) {\n  float d = length(v_uv0.xy - pos);\n  float s1 = step(d, radius * emisive);\n  float s2 = step(radius * 0.9  * emisive, d);\n  return step(2., s1 + s2);\n}\nvoid main () {\n  vec4 o = texture(texture, v_uv0);\n  vec2 rain_uv = vec2(v_uv0.x, v_uv0.y * 0.02 - cc_time.x * speed);\n  rain_uv.x += v_uv0.y * 0.3;\n  vec4 col_rain = texture(noiseTexture, rain_uv);\n  float f = (col_rain.r - force *  col_rain.g - force *  col_rain.b);\n  f = smoothstep(0., 0.05, f);\n  o.rgb += vec3(f);\n  vec4 ripple = texture(rippleTexture, v_uv0);\n  float opacity = fract(ripple.a + cc_time.x);\n  float range = opacity - 1.0 + ripple.x;\n  float fadeout = 1. - opacity;\n  float final = fadeout * sin(clamp(range * 80.0, 0.0, 2.) * 3.141592653) * 2.0;\n  o.rgb += vec3(clamp(final, 0., 1.));\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}