{
  "ver": "1.0.25",
  "uuid": "8dff275f-8c0c-4ba6-8d69-1ee18a678307",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n      v_uv0 = a_uv0;\n      v_color = a_color;\n      vec4 pos = vec4(a_position, 1);\n      pos = cc_matViewProj * pos;\n      gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvec4 guassianBlur() {\n    vec2 offset = vec2(1. / 305., 1. / 405.);\n    float weight[5];\n    weight[0] = 0.227027;\n    weight[1] = 0.1945946;\n    weight[2] = 0.1216216;\n    weight[3] = 0.054054;\n    weight[4] = 0.016216;\n    vec4 result = texture2D(texture, v_uv0) * weight[0];\n    for (int i = 1; i < 5; i++) {\n        result += texture2D(texture, v_uv0 + vec2(offset.x * float(i), 0.0)) * weight[i] / 2.;\n        result += texture2D(texture, v_uv0 - vec2(offset.x * float(i), 0.0)) * weight[i] / 2.;\n    }\n    for (int i = 1; i < 5; i++) {\n        result += texture2D(texture, v_uv0 + vec2(0.0, offset.y * float(i))) * weight[i] / 2.;\n        result += texture2D(texture, v_uv0 - vec2(0.0, offset.y * float(i))) * weight[i] / 2.;\n    }\n    return result;\n}\nvoid main () {\n    gl_FragColor = guassianBlur();\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n      v_uv0 = a_uv0;\n      v_color = a_color;\n      vec4 pos = vec4(a_position, 1);\n      pos = cc_matViewProj * pos;\n      gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nvec4 guassianBlur() {\n    vec2 offset = vec2(1. / 305., 1. / 405.);\n    float weight[5];\n    weight[0] = 0.227027;\n    weight[1] = 0.1945946;\n    weight[2] = 0.1216216;\n    weight[3] = 0.054054;\n    weight[4] = 0.016216;\n    vec4 result = texture(texture, v_uv0) * weight[0];\n    for (int i = 1; i < 5; i++) {\n        result += texture(texture, v_uv0 + vec2(offset.x * float(i), 0.0)) * weight[i] / 2.;\n        result += texture(texture, v_uv0 - vec2(offset.x * float(i), 0.0)) * weight[i] / 2.;\n    }\n    for (int i = 1; i < 5; i++) {\n        result += texture(texture, v_uv0 + vec2(0.0, offset.y * float(i))) * weight[i] / 2.;\n        result += texture(texture, v_uv0 - vec2(0.0, offset.y * float(i))) * weight[i] / 2.;\n    }\n    return result;\n}\nvoid main () {\n    gl_FragColor = guassianBlur();\n}"
      }
    }
  ],
  "subMetas": {}
}