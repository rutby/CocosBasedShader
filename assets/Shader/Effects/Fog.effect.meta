{
  "ver": "1.0.25",
  "uuid": "ecb260c0-d6f3-46d2-a26e-a42ae975a239",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\n  const vec4 COLOR = vec4(1., 1., 1., 1.);\n  const int OCTAVES = 10;\n  const float INTENSITY = 2.;\n  vec2 random(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)), dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0 * fract(sin(st) * 7.);\n  }\n  float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      vec2 u = f*f*(3.0-2.0*f);\n      return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                      dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                      dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n  }\n  float fbm(vec2 coord) {\n      float value = 0.0;\n      float scale = .3;\n      for (int i = 0; i < OCTAVES; i++) {\n          value += noise(coord) * scale;\n          coord *= 2.0;\n          scale *= 0.5;\n      }\n      return value + 0.3;\n  }\n  void main () {\n      vec4 o = texture2D(texture, v_uv0);\n      vec2 pos1 = v_uv0 + vec2(cc_time.x * 0.1, cc_time.x * -0.1);\n      vec2 pos2 = v_uv0 + vec2(cc_time.x * 0.4, cc_time.x * -0.3);\n      vec2 motion = vec2(fbm(pos1));\n      float final = fbm(pos2 + motion) * INTENSITY;\n      final = clamp(final, 0., 1.);\n      o = mix(o, COLOR, final);\n      gl_FragColor = o;\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\n  const vec4 COLOR = vec4(1., 1., 1., 1.);\n  const int OCTAVES = 10;\n  const float INTENSITY = 2.;\n  vec2 random(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)), dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0 * fract(sin(st) * 7.);\n  }\n  float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      vec2 u = f*f*(3.0-2.0*f);\n      return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                      dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                      dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n  }\n  float fbm(vec2 coord) {\n      float value = 0.0;\n      float scale = .3;\n      for (int i = 0; i < OCTAVES; i++) {\n          value += noise(coord) * scale;\n          coord *= 2.0;\n          scale *= 0.5;\n      }\n      return value + 0.3;\n  }\n  void main () {\n      vec4 o = texture(texture, v_uv0);\n      vec2 pos1 = v_uv0 + vec2(cc_time.x * 0.1, cc_time.x * -0.1);\n      vec2 pos2 = v_uv0 + vec2(cc_time.x * 0.4, cc_time.x * -0.3);\n      vec2 motion = vec2(fbm(pos1));\n      float final = fbm(pos2 + motion) * INTENSITY;\n      final = clamp(final, 0., 1.);\n      o = mix(o, COLOR, final);\n      gl_FragColor = o;\n  }"
      }
    }
  ],
  "subMetas": {}
}