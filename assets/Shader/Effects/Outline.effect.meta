{
  "ver": "1.0.25",
  "uuid": "6824157c-c8f1-4940-bc14-d0e74a4d500e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform vec4 outlineColor;\nuniform vec2 textureSize;\nuniform float outlineWidth;\n  float kernel(float width) {\n      vec4 noise = texture2D(noiseTexture, v_uv0 + fract(cc_time.x));\n      vec2 noiseOffset = vec2(noise.r * 0.01, noise.g * 0.01);\n      float ox = width / textureSize.x + noiseOffset.x;\n      float oy = width / textureSize.y + noiseOffset.y;\n      vec2 pos1 = v_uv0 + vec2(-ox, -oy);\n      vec2 pos2 = v_uv0 + vec2(-ox, oy);\n      vec2 pos3 = v_uv0 + vec2(ox, -oy);\n      vec2 pos4 = v_uv0 + vec2(ox, oy);\n      vec2 pos5 = v_uv0 + vec2(-ox, 0.);\n      vec2 pos6 = v_uv0 + vec2(ox, 0.);\n      vec2 pos7 = v_uv0 + vec2(0., -oy);\n      vec2 pos8 = v_uv0 + vec2(0., oy);\n      float p1 = texture2D(texture, pos1).a;\n      float p2 = texture2D(texture, pos2).a;\n      float p3 = texture2D(texture, pos3).a;\n      float p4 = texture2D(texture, pos4).a;\n      float p5 = texture2D(texture, pos5).a;\n      float p6 = texture2D(texture, pos6).a;\n      float p7 = texture2D(texture, pos7).a;\n      float p8 = texture2D(texture, pos8).a;\n      return (p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8) / 8.0 * step(texture2D(texture, v_uv0).a, 0.5);\n  }\n  vec4 lerp(vec4 a, vec4 b, float t) {\n      return a.rgba + (b.rgba-a.rgba) * t;\n  }\nvoid main () {\n  vec4 o = texture2D(texture, v_uv0);\n  float s3 = kernel(outlineWidth);\n  o = lerp(o, outlineColor, smoothstep(0.1 - 0.1, 0.1 + 0.1, s3));\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform CUSTOM {\n    vec4 outlineColor;\n    vec2 textureSize;\n    float outlineWidth;\n};\n  float kernel(float width) {\n      vec4 noise = texture(noiseTexture, v_uv0 + fract(cc_time.x));\n      vec2 noiseOffset = vec2(noise.r * 0.01, noise.g * 0.01);\n      float ox = width / textureSize.x + noiseOffset.x;\n      float oy = width / textureSize.y + noiseOffset.y;\n      vec2 pos1 = v_uv0 + vec2(-ox, -oy);\n      vec2 pos2 = v_uv0 + vec2(-ox, oy);\n      vec2 pos3 = v_uv0 + vec2(ox, -oy);\n      vec2 pos4 = v_uv0 + vec2(ox, oy);\n      vec2 pos5 = v_uv0 + vec2(-ox, 0.);\n      vec2 pos6 = v_uv0 + vec2(ox, 0.);\n      vec2 pos7 = v_uv0 + vec2(0., -oy);\n      vec2 pos8 = v_uv0 + vec2(0., oy);\n      float p1 = texture(texture, pos1).a;\n      float p2 = texture(texture, pos2).a;\n      float p3 = texture(texture, pos3).a;\n      float p4 = texture(texture, pos4).a;\n      float p5 = texture(texture, pos5).a;\n      float p6 = texture(texture, pos6).a;\n      float p7 = texture(texture, pos7).a;\n      float p8 = texture(texture, pos8).a;\n      return (p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8) / 8.0 * step(texture(texture, v_uv0).a, 0.5);\n  }\n  vec4 lerp(vec4 a, vec4 b, float t) {\n      return a.rgba + (b.rgba-a.rgba) * t;\n  }\nvoid main () {\n  vec4 o = texture(texture, v_uv0);\n  float s3 = kernel(outlineWidth);\n  o = lerp(o, outlineColor, smoothstep(0.1 - 0.1, 0.1 + 0.1, s3));\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}