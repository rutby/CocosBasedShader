{
  "ver": "1.0.25",
  "uuid": "8d78bca1-e24a-46d2-8361-d6a45403f994",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform sampler2D distortionTexture;\nvec4 lerp(vec4 a, vec4 b, float t) {\n    return a.rgba + (b.rgba-a.rgba) * t;\n}\nvoid main () {\n    vec4 o = vec4(0, 0, 0, 1.);\n    vec4 gradientShallow = vec4(0.325, 0.807, 0.971, 0.725);\n    vec4 gradientDeep = vec4(0.086, 0.407, 1, 0.749);\n    float maxDistance = 0.5;\n    float noiseCutoff = 0.777;\n    float foamDistance = 0.4;\n    vec2 noiseScroll = vec2(0.03, 0.03);\n    float distortionAmount = 0.27;\n    float depthDiff = length(v_uv0.xy - 0.5);\n    float waterDiff01 = depthDiff / maxDistance;\n    o = lerp(gradientDeep, gradientShallow, waterDiff01);\n    float borderDepthDiff01 = 1. - smoothstep(foamDistance, maxDistance, depthDiff);\n    noiseCutoff = borderDepthDiff01 * noiseCutoff;\n    vec4 distortion = texture2D(distortionTexture, v_uv0);\n    vec2 distortSample = (distortion.xy * 2. - 1.) * distortionAmount;\n    vec2 noiseUV = vec2(v_uv0.x + cc_time.x * noiseScroll.x + distortSample.x, v_uv0.y + cc_time.x * noiseScroll.y + distortSample.y);\n    vec4 noise = texture2D(noiseTexture, noiseUV);\n    o.rgba += smoothstep(noiseCutoff - 0.01, noiseCutoff + 0.01, noise.r);\n    gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\nout vec4 v_color;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D noiseTexture;\nuniform sampler2D distortionTexture;\nvec4 lerp(vec4 a, vec4 b, float t) {\n    return a.rgba + (b.rgba-a.rgba) * t;\n}\nvoid main () {\n    vec4 o = vec4(0, 0, 0, 1.);\n    vec4 gradientShallow = vec4(0.325, 0.807, 0.971, 0.725);\n    vec4 gradientDeep = vec4(0.086, 0.407, 1, 0.749);\n    float maxDistance = 0.5;\n    float noiseCutoff = 0.777;\n    float foamDistance = 0.4;\n    vec2 noiseScroll = vec2(0.03, 0.03);\n    float distortionAmount = 0.27;\n    float depthDiff = length(v_uv0.xy - 0.5);\n    float waterDiff01 = depthDiff / maxDistance;\n    o = lerp(gradientDeep, gradientShallow, waterDiff01);\n    float borderDepthDiff01 = 1. - smoothstep(foamDistance, maxDistance, depthDiff);\n    noiseCutoff = borderDepthDiff01 * noiseCutoff;\n    vec4 distortion = texture(distortionTexture, v_uv0);\n    vec2 distortSample = (distortion.xy * 2. - 1.) * distortionAmount;\n    vec2 noiseUV = vec2(v_uv0.x + cc_time.x * noiseScroll.x + distortSample.x, v_uv0.y + cc_time.x * noiseScroll.y + distortSample.y);\n    vec4 noise = texture(noiseTexture, noiseUV);\n    o.rgba += smoothstep(noiseCutoff - 0.01, noiseCutoff + 0.01, noise.r);\n    gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}