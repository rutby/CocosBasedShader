{
  "ver": "1.0.25",
  "uuid": "c26bdfe9-861a-473a-a9df-deb295520e43",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mediump mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvoid main () {\n    vec4 o = vec4(0.);\n    if (v_color.r < 1. / 8.) {\n        o = texture2D(texture0, v_uv0);\n    } else if (v_color.r < 2. / 8.) {\n        o = texture2D(texture1, v_uv0);\n    } else if (v_color.r < 3. / 8.) {\n        o = texture2D(texture2, v_uv0);\n    } else if (v_color.r < 4. / 8.) {\n        o = texture2D(texture3, v_uv0);\n    } else if (v_color.r < 5. / 8.) {\n        o = texture2D(texture4, v_uv0);\n    } else if (v_color.r < 6. / 8.) {\n        o = texture2D(texture5, v_uv0);\n    } else if (v_color.r < 7. / 8.) {\n        o = texture2D(texture6, v_uv0);\n    } else if (v_color.r < 8. / 8.) {\n        o = texture2D(texture7, v_uv0);\n    }\n    gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n    vec4 pos = vec4(a_position, 1);\n    pos = cc_matViewProj * pos;\n    v_uv0 = a_uv0;\n    v_color = a_color;\n    gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  mediump mat4 cc_matViewInv;\n  mediump mat4 cc_matProj;\n  mediump mat4 cc_matProjInv;\n  mediump mat4 cc_matViewProj;\n  mediump mat4 cc_matViewProjInv;\n  mediump vec4 cc_cameraPos;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture0;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform sampler2D texture3;\nuniform sampler2D texture4;\nuniform sampler2D texture5;\nuniform sampler2D texture6;\nuniform sampler2D texture7;\nvoid main () {\n    vec4 o = vec4(0.);\n    if (v_color.r < 1. / 8.) {\n        o = texture(texture0, v_uv0);\n    } else if (v_color.r < 2. / 8.) {\n        o = texture(texture1, v_uv0);\n    } else if (v_color.r < 3. / 8.) {\n        o = texture(texture2, v_uv0);\n    } else if (v_color.r < 4. / 8.) {\n        o = texture(texture3, v_uv0);\n    } else if (v_color.r < 5. / 8.) {\n        o = texture(texture4, v_uv0);\n    } else if (v_color.r < 6. / 8.) {\n        o = texture(texture5, v_uv0);\n    } else if (v_color.r < 7. / 8.) {\n        o = texture(texture6, v_uv0);\n    } else if (v_color.r < 8. / 8.) {\n        o = texture(texture7, v_uv0);\n    }\n    gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}